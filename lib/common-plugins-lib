#!/bin/bash
#
# Author      : jdum
# Date        : 30 avril 2019
# Description : Common methode to install and configure a trac plugin library
# Version     : 1.1
#--------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
# Name        : _setSections
# parameters  : sections necessary in trac.ini
# Description : Configure section's plugins in trac.ini
# Returns     :
#
_setSections()
{
 _mdbg 1  "-- Enter _setSections"
  for hashName in  $*
  do
     _mdbg 2 "Processing $hashName now"
     var=$(declare -p "$hashName")
     eval "declare -A _hash="${var#*=}
     _mdbg 3 "Found ${#_hash[@]} elements in $hashName"

     for option in "${!_hash[@]}"
     do
         _mdbg 2  "[${hashName}] add $option = ${_hash["$option"]} in trac.ini"      # Keep previous index logic
         _setOptionInTracIniSection "${hashName}" "$option" "${_hash[$option]}"
     done
  done
 _mdbg 1  "-- Leave _setSections"
}
#--------------------------------------------------------------------------------------------------------------
# Name        : _setTracIniPlugin
# parameters  : plugin's name
# Description : Configure specific plugins, once the trac project is generated, with specific plugin methode methodHandler
# Returns     :
#
_setTracIniPlugin()
{
  local pluginName=$1
   _mdbg 1  "-- Enter _setTracIniPlugin"
   _minf "Configure $pluginName with trac-admin"
    [ -f $TRAC_INI ] && sudo chown apache:apache $TRAC_INI
    if _isInHash METHODS_PLUGINS ${pluginName}
    then
        sudo trac-admin "${PROJECT_DIR}" upgrade 2>&1 | tee --append $LOG_FILE >/dev/null
        _mdbg 2  "$pluginName will be be processed by ${METHODS_PLUGINS["${pluginName}"]} method"
        ${METHODS_PLUGINS["${pluginName}"]} && _mdbg 2  "$pluginName customized with ${METHODS_PLUGINS["${pluginName}"]} method"
        _installPluginPackage  "${pluginName}"
    fi
  _mdbg 1  "-- Leave _setTracIniPlugin"
  return 0
}
#--------------------------------------------------------------------------------------------------------------
# Name        : _backupTracIni
# parameters  :
# Description : Makes a backup of the trac.ini file
# Returns     : true
#
_backupTracIni() #
{
    local timeStamp=$(_getTimeStamp)
    local tracIniCopy=${TRAC_INI}.${timeStamp}
   _mdbg 1  "-- Enter _backupTracIni"
   _minf "Backup $TRAC_INI"

   sudo cp ${TRAC_INI} ${tracIniCopy}           || _mnok " Pb copying  ${TRAC_INI} -> ${tracIniCopy}"
   _mok "Made a copy of trac.ini in ${tracIniCopy}"
   sudo chmod 666 ${tracIniCopy}               &&  _mdbg 1  "Change to 666 permission for ${tracIniCopy}"

   _mdbg 1  "-- Leave _backupTracIni"
   return 0
}
#--------------------------------------------------------------------------------------------------------------
# Name        : _installPluginPackage
# parameters  : plugins name, and type of install easyinstall, svn, or pip tbd
# Description : install a specific plugin, defined by its url location, its name
# Returns     : true
#
_installPluginPackage()
{
  _mdbg 1  "-- Enter _installPluginPackage"
  local pluginName=$1
  local installType="easyinstall"
  #[ "$2" != "" ] &&  installType=$2
  _mdbg 2  "Enter _installPluginPackage"
  _mdbg 2  "$pluginName install with $installType"
  cd ${PROJECT_DIR}/plugins
  if [ "${PLUGINS_URL["${pluginName}"]}" == "core" ]
  then
        _minf "$pluginName is a core Trac plugin"
  else
        case  ${installType} in
          easyinstall)  _mdbg 2  "From $(pwd) will perform an $installType"
                         sudo easy_install -U -Z  ${PLUGINS_URL["${pluginName}"]}  --build-directory ${PLUGINS_DIR} 2>&1 | tee --append $LOG_FILE >/dev/null && \
                        _mok "$pluginName has been installed with $installType "
          ;;
          svn) _mdbg 1  "From $(pwd) will perform an $installType"
               sudo mkdir $installType &&  _minf "Create plugin $installType plugin repo"
               _mdbg 1  "From $(pwd) will perform an $installType co"
               svn co ${PLUGINS_URL["${pluginName}"]} && _mok "$pluginName svn repo co"
               setupPath=$(find . -name setup.py)
               _mdbg 1  "Warning setupPath=$setupPath"
               cd $(dirname $setupPath)
               _mdbg 1  "Lauchning setup.py from $(pwd)"
               _mdbg 1  "From $(pwd) will perform : python setup.py install"
               sudo python setup.py install && _mok "${pluginName} installed the $installType way"

          ;;
          pip) _mdbg 1  "pip install"
          ;;
        esac
   fi
  _mdbg 1  "-- Leave _installPluginPackage"
return 0
}

#--------------------------------------------------------------------------------------------------------------
# Name        : _setOptionInTracIniSection
# parameters  : section, e.g components, then key + value
# Description : Add settings key+value in trac.ini
# Returns     : true
#
_setOptionInTracIniSection()
{
 local section="$1"    # e.g [components]
 local key="$2"        # key = value
 local value=$3
 _mdbg 6  "Enter _setOptionInTracIniSection"
 _mdbg 6  "$section $key $value to add to trac.ini"
 sudo rm -f /tmp/$0.trac-admin
 sudo trac-admin ${PROJECT_DIR} config set "$section" "$key" "$value" 2>&1 > /tmp/$0.trac-admin   && _mdbg 6 "trac.ini modified with $key=$value added in $section"
 if grep upgrade /tmp/$0.trac-admin 2>&1 >/dev/null
 then
      sudo trac-admin "${PROJECT_DIR}" upgrade 2>&1 >/dev/null
 fi
 _mdbg 6  " Leave _setOptionInTracIniSection"
 return 0
}
#-----------------------------------------------------------------------------------------------
