#!/bin/bash
# Common shell script library
# Author: jdum
# Date: 30 avril 2019
# Version 1.1
# Add _mdbg
declare -A COLORS=( ["black"]="30" ["red"]="31" ["green"]="32" ["brown_orange"]="33"\
                    ["blue"]="34" ["purple"]="35"  ["cyan"]="36" ["light_gray"]="37")
# returns date formated string -----------------------------------------
_getDateLine()
{
	echo -ne "[$(date +"%m-%d-%Y")][$(date +"%T")]"
}
# returns a colored string
_colorString()
{
	color="$1"
	string="$2"
	escColorValue=${COLORS["$color"]}
	# escape sequence
	escStart="\033["
	escEnd="\033[0m"
	# char formating
	bold=';1'
	underlined=4
	flashing=1

	echo -ne "${escStart}${escColorValue};${escColorValue}${bold}m${string}${escEnd}"
}
# Display msg with color tags OK, NOK ,INFO ----------------------------
_displayColorTag()
{
	   logfile="/tmp/$(basename ${0}).log"
     tag="${1}"
     text="${2}"

     case ${tag} in

         NOK)   echo -ne "$(_getDateLine)[$(_colorString 'red' $tag)]  ${text}" | tee --append $logfile
         ;;
         OK)    echo -ne "$(_getDateLine)[$(_colorString 'green' $tag)]  ${text}" | tee --append $logfile
         ;;
         INFO)  [ $VERBOSE -eq 1 -o $DEBUG -eq 21 ] && echo -ne "$(_getDateLine)[$(_colorString 'brown_orange' $tag)]  ${text}" | tee --append $logfile

	   esac
}
# Return a time stamp  -----------------------------------------
_getTimeStamp()
{

 echo -ne $(date +"%Y%m%d%H%M%S")

}

#- wrapper methods  -----------------------------------------

_mok()
{
	_displayColorTag OK  "${1}"
	echo
}
_mnok()
{
	_displayColorTag NOK  "${1}"
	echo
}
_minf()
{
	_displayColorTag INFO  "${1}"
	echo
}
_mdbg()
{
	debugLevel=$1
	message="$2"
  thisTag='DEBUG'
  declare VALID_LEVELS=( 1 2 3 4 5 6 21 )
  [ ${DEBUG} -ne ${debugLevel} ] && return
	if [[ "${message}" == --* ]]
  then
	   		color="cyan"
		 		coloredMessage=$(_colorString $color "${message}")
        coloredTag=$(_colorString $color "${thisTag}")
		 		echo -ne "$(_getDateLine)["$coloredTag"]  ${coloredMessage}" | tee --append $logfile;echo 
   else
			 		for dbg in ${VALID_LEVELS[*]}
					do
								 if [ ${DEBUG} -eq 1 -o $DEBUG -eq 21 ]
								 then
                   color="blue"; coloredTag=$(_colorString $color "$thisTag")
                   echo -ne "$(_getDateLine)["$coloredTag"]  ${message}" | tee --append $logfile ;echo
                 fi
                 if [ ${DEBUG} -eq 1 -o $DEBUG -eq 21 ]
								 then
                      case $DEBUG in
                        1) color="blue";coloredTag=$(_colorString $color "$thisTag")
                                   echo -ne "$(_getDateLine)["$coloredTag"]  ${message}" | tee --append $logfile ;echo
										    ;;
						    2|3|4|5|6) color="purple";coloredTag=$(_colorString $color "$thisTag")
                           echo -ne "$(_getDateLine)["$coloredTag"]  ${message}" | tee --append $logfile ;echo
										    ;;
										 	 21)  color="brown_orange"; coloredTag=$(_colorString $color "$thisTag")
                            echo -ne "$(_getDateLine)["$coloredTag"]  ${message}" | tee --append $logfile ;echo
											  ;;
										  esac
											return 0
								 fi
					done
					echo $(_colorString red "Invalid debug $debugLevel, supported one's are 1 2 3 4 5 6 21" )
					exit 3
  fi
}
#---------------------------------------------------------------------

# Set logging ------------------------------------------
_setLogging()
{
	_mdbg 2 "-- Enter _setLogging"
  logfile=/tmp/$(basename ${0}).log
  timestamp=$(_getTimeStamp)
  [ -f ${logfile} ] && mv ${logfile} "${logfile}.$(_getTimeStamp)" && _minf "logfile ${logfile} is backuped in ${logfile}.$timestamp"
  echo "# $(_getDateLine) $(basename $0) logging started"> ${logfile}
	_mdbg 2 "-- Leave _setLogging"
  return 0
}
#---------------------------------------------------

_upperCase()
{
echo ${1}|dd conv=ucase 2>/dev/null
}
